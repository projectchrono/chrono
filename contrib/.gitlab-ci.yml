
#####################################
## ProjectChrono Default CI Config ##
#####################################

#TODO: Move all clean-up operations to after_script sections
# This will ensure that the clean-up happens even if the build/deployment fails

# Option to disable CI builds for a particular branch
#workflow:
#  rules:
#    - if: '$CI_COMMIT_REF_NAME == "feature/fsi"'
#      when: never

# Build Stages (shared by each platform)
stages:
  - build
  - test
  - deploy

linux:doxygen:deploy:
  tags:
  - linux
  image:
    name: ubuntu:focal
  stage: deploy
  before_script:
    - TZ=America/Chicago
    - ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone  
    - apt-get update; apt-get install -y git python python3-pip graphviz rsync wget
    #- pacman -Sy --noconfirm base-devel git python python-pip graphviz openssh rsync wget
    - wget https://downloads.sourceforge.net/project/doxygen/rel-1.8.16/doxygen-1.8.16.linux.bin.tar.gz
    - tar -xf doxygen-1.8.16.linux.bin.tar.gz
    - mkdir -p ~/.ssh
    - chmod 0700 ~/.ssh
    # This private key is only useable from specific IPs, so it should be okay to
    # be included here.
    - cp $API_PRIVATE_KEY ~/.ssh/id_ed25519
    - chmod 0600 ~/.ssh/id_ed25519
    # Remove any duplicate host key entries, if necessary
    - if test -f ~/.ssh/known_hosts; then ssh-keygen -R $API_REINDEX_ENDPOINT; fi
    # Cache a verified host pubkey from file to avoid MITM attacks
    - cat $API_ENDPOINT_PUBKEY >> ~/.ssh/known_hosts
  script:
    - export PATH="$PWD/doxygen-1.8.16/bin:$PATH"
    - cd doxygen
    - doxygen Doxyfile
    # - doxygen Doxyfile_Generate_Search_Index
    - rsync -ra /tmp/chrono_doxygen/html/* $API_HTML_ENDPOINT
    - rsync /tmp/chrono_doxygen/searchdata.xml $API_SEARCH_ENDPOINT
    - ssh $API_REINDEX_ENDPOINT /usr/bin/doxyindexer -o $API_CGI_DIR $API_CGI_DIR/searchdata.xml
  needs:
    - job: macos-apple:monterey:test
      artifacts: false
    - job: windows:vs2022:test
      artifacts: false
  environment:
    name: doxygen
    url: http://api.projectchrono.org/
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'
      when: always

#----------------#
# Ubuntu Builder #
#----------------#

.ubuntu:
  tags:
    - linux
  image:
      name: uwsbel/packages:ubuntu
  before_script:
    # Defining configuration variables
    - export DEBIAN_FRONTEND=noninteractive
    - export LIB_DIR="lib"
    - export IOMP5_DIR=""
    - apt-get update; apt-get -y install unzip wget python3 python3-pip libomp-dev
      git cmake ninja-build doxygen libvulkan-dev pkg-config libirrlicht-dev 
      freeglut3-dev mpich libasio-dev libboost-dev libglfw3-dev libglm-dev 
      libglew-dev libtinyxml2-dev swig python3-dev libhdf5-dev libnvidia-gl-535
      curl software-properties-common
    - wget -O- https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB | 
      gpg --dearmor | tee /usr/share/keyrings/oneapi-archive-keyring.gpg > /dev/null
    - echo "deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] 
      https://apt.repos.intel.com/oneapi all main" | tee /etc/apt/sources.list.d/oneAPI.list
    - apt update
    - apt -y install intel-basekit libxcb-randr0-dev libxcb-xtest0-dev libxcb-xinerama0-dev
      libxcb-shape0-dev libxcb-xkb-dev xorg-dev
    - ldconfig
    # ROS
    - add-apt-repository universe
    - apt update
    - curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg
    - echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] 
      http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null
    - apt update
    - apt install -y ros-humble-ros-base python3-colcon-common-extensions
    - source /opt/ros/humble/setup.sh
    - mkdir -p $CI_PROJECT_DIR/contrib/ros_ws/src
    - cd $CI_PROJECT_DIR/contrib/ros_ws
    - git clone https://github.com/projectchrono/chrono_ros_interfaces.git src/
    - colcon build --packages-select chrono_ros_interfaces
    # Initialize git repository
    - cd $CI_PROJECT_DIR
    - git submodule init
    - git submodule update
    - mkdir -p build
    # VSG
    - chmod +x $CI_PROJECT_DIR/contrib/build-scripts/vsg/buildVSG.sh
    - sh $CI_PROJECT_DIR/contrib/build-scripts/vsg/buildVSG.sh $CI_PROJECT_DIR/contrib/build-scripts/vsg_build

linux:ubuntu22.04-gcc:build:
  extends: .ubuntu
  stage: build
  script:
    # Source ROS distro
    - source $CI_PROJECT_DIR/contrib/ros_ws/install/setup.sh
    # Defining compiler variables
    - export C_COMPILER="/usr/bin/gcc"
    - export CXX_COMPILER="/usr/bin/g++"
    # Building chrono
    - cmake -G "Ninja" -B $CI_PROJECT_DIR/build/ -S $CI_PROJECT_DIR --preset=linuxci
    # Making chrono
    - cd $CI_PROJECT_DIR/build
    - ninja
  artifacts:
    expire_in: 60m
    paths:
      - build/

linux:ubuntu22.04-gcc:test:
  stage: test
  needs: ["linux:ubuntu22.04-gcc:build"]
  extends: .ubuntu
  script:
    - cd build
    # Source ROS distro
    - source $CI_PROJECT_DIR/contrib/ros_ws/install/setup.sh
    - export OMP_NUM_THREADS=8
    - export CTEST_OUTPUT_ON_FAILURE=1
    - ninja test
  dependencies: ["linux:ubuntu22.04-gcc:build"]

linux:ubuntu22.04-clang:build:
  extends: .ubuntu
  stage: build
  script:
    # Source ROS distro
    - source $CI_PROJECT_DIR/contrib/ros_ws/install/setup.sh
    # Defining compiler variables
    - export C_COMPILER="/usr/bin/clang"
    - export CXX_COMPILER="/usr/bin/clang++"
    # Building chrono
    - cmake -G "Ninja" -B $CI_PROJECT_DIR/build/ -S $CI_PROJECT_DIR --preset=linuxci -DCUDA_HOST_COMPILER=/usr/bin/gcc
    # Making chrono
    - cd $CI_PROJECT_DIR/build
    - ninja
  artifacts:
    expire_in: 60m
    paths:
      - build/

linux:ubuntu22.04-clang:test:
  stage: test
  needs: ["linux:ubuntu22.04-clang:build"]
  extends: .ubuntu
  script:
    - cd build
    # Source ROS distro
    - source $CI_PROJECT_DIR/contrib/ros_ws/install/setup.sh
    - export OMP_NUM_THREADS=8
    - export CTEST_OUTPUT_ON_FAILURE=1
    - ninja test
  dependencies: ["linux:ubuntu22.04-clang:build"]

.ubuntu-deploy-base:
  tags:
    - linux
  image:
      name: uwsbel/packages:ubuntu
  before_script:
    # this script overwrites the default ubuntu script to include conda preparations
    - uname -a
    - export DEBIAN_FRONTEND=noninteractive
    - apt-get update; apt-get -y install unzip wget python3 python3-pip
      git cmake ninja-build doxygen libvulkan-dev pkg-config libirrlicht-dev 
      freeglut3-dev mpich libasio-dev libboost-dev libglfw3-dev libglm-dev 
      libglew-dev libtinyxml2-dev swig python3-dev libhdf5-dev libnvidia-gl-530
      curl software-properties-common
    - ldconfig
    - wget https://bitbucket.org/blaze-lib/blaze/downloads/blaze-3.8.tar.gz
    - tar -xf blaze-3.8.tar.gz
    - cp blaze-3.8/blaze -r /usr/local/include
    # ROS
    - add-apt-repository universe
    - apt update
    - curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg
    - echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] 
      http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null
    - apt update
    - apt install -y ros-humble-ros-base python3-colcon-common-extensions
    - source /opt/ros/humble/setup.sh
    - mkdir -p $HOME/Packages/ros_ws/src
    - cd $HOME/Packages/ros_ws
    - git clone https://github.com/projectchrono/chrono_ros_interfaces.git src/
    - colcon build --packages-select chrono_ros_interfaces
    - source $HOME/Packages/ros_ws/install/setup.sh
    - git submodule init
    - git submodule update
    - echo "Build PyChrono and deploy via Anaconda..."
    # this command is needed to get the git describe data needed by the numbering
    - git fetch --prune --unshallow
    - export CONDA_NPY=19
    - wget "http://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh"
    - bash Miniconda3-latest-Linux-x86_64.sh -b
    - export PATH=$HOME/miniconda3/bin:$PATH
    - conda config --set show_channel_urls true
    - conda install conda-build anaconda-client conda-verify --yes
    - conda update conda --yes
    - conda config --add channels https://conda.anaconda.org/conda-forge
    - conda config --add channels https://conda.anaconda.org/intel
  environment:
    name: pychrono-ubuntu22.04
    url: https://anaconda.org/projectchrono/pychrono

linux:ubuntu22.04:deploy-python3.8:
  stage: deploy
  needs: []
  extends: .ubuntu-deploy-base
  script:
    - conda build purge-all
    - conda build ./contrib/packaging-python/conda -c intel -c conda-forge -c dlr-sc --no-remove-work-dir --dirty --python=3.8
    - anaconda -t $ANACONDA_TOKEN upload $HOME/miniconda3/conda-bld/linux-64/pychrono*.bz2 -l main --force
  when: manual

linux:ubuntu22.04:deploy-python3.9:
  stage: deploy
  needs: []
  extends: .ubuntu-deploy-base
  script:
    - conda build purge-all
    - conda build ./contrib/packaging-python/conda -c intel -c conda-forge -c dlr-sc --no-remove-work-dir --dirty --python=3.9
    - anaconda -t $ANACONDA_TOKEN upload $HOME/miniconda3/conda-bld/linux-64/pychrono*.bz2 -l main --force
  when: manual

linux:ubuntu22.04:deploy-python3.10:
  stage: deploy
  needs: []
  extends: .ubuntu-deploy-base
  script:
    - conda build purge-all
    - conda build ./contrib/packaging-python/conda -c intel -c conda-forge -c dlr-sc --no-remove-work-dir --dirty --python=3.10
    - anaconda -t $ANACONDA_TOKEN upload $HOME/miniconda3/conda-bld/linux-64/pychrono*.bz2 -l main --force
  when: manual

#------------------#
# Windows Builders #
#------------------#

.windows:
  tags:
  - windows11
  before_script:
  - '& "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\Common7\Tools\Launch-VsDevShell.ps1"'
  - $env:CONDA_INSTALL_LOCN="C:\Users\builder\miniconda3"
  - echo $CI_PROJECT_DIR
  - git submodule init
  - git submodule update
  - mkdir -Force -p build
  - mkdir -Force -p install
  #- mkdir -Force build

windows:vs2022:build:
  stage: build
  extends: .windows
  script:
  # Build vsg with buildVSG script
  - '& $CI_PROJECT_DIR\contrib\build-scripts\vsg\buildVSG.bat $CI_PROJECT_DIR\contrib\build-scripts\vsg_build'
  # Build vsg with buildURDF script
  - '& $CI_PROJECT_DIR\contrib\build-scripts\urdf\buildURDF.bat $CI_PROJECT_DIR\contrib\build-scripts\urdf_build'
  # Configuring chrono
  - cmake -B "$CI_PROJECT_DIR\build" -S "$CI_PROJECT_DIR" -DCMAKE_CXX_FLAGS="/MP4" --preset=windowsci-vs2022
  - cd build
  # Building chrono
  - cmake --build . -j 8 --config Release
  artifacts:
    expire_in: 60m
    paths:
      - build/

windows:vs2022:test:
  stage: test
  needs: ["windows:vs2022:build"]
  extends: .windows
  script:
  - cd build
  - ctest --extra-verbose --output-on-failure
  dependencies: ["windows:vs2022:build"]

.windows-deploy-base:
  tags:
    - windows11
  before_script:
    - '& "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\Common7\Tools\Launch-VsDevShell.ps1"'
    - $env:CONDA_INSTALL_LOCN="C:\Users\builder\miniconda3"
    - echo $CI_PROJECT_DIR
    - git submodule init
    - git submodule update
    # Logs directory to store all logs instead of outputting them to screen
    - mkdir ./logs
    - $Env:LOG_DIR=Join-Path -Path $pwd -ChildPath "\logs"
    # this command is needed to get the git describe data needed by the numbering
    - git fetch --prune --unshallow
    # Uncomment the following lines to get a fresh install of Miniconda
    #- Invoke-WebRequest -Uri https://repo.anaconda.com/miniconda/Miniconda3-latest-Windows-x86_64.exe  -OutFile ./Miniconda3-latest-Windows-x86_64.exe >temp.txt
    #- Start-Process -Wait  "Miniconda3-latest-Windows-x86_64.exe" -ArgumentList "/InstallationType=JustMe /RegisterPython=0 /S /D=$env:CONDA_INSTALL_LOCN"
    # Initializing the PowerShell would require to restart it. Since it isn't possible, we use the cmd instead.
    #- Start-Process "cmd.exe" "/c .\contrib\packaging-python\gitlab\build_pychrono.bat >outputfile.txt" -Wait
    #Run conda-hook
    - '& "C:\Users\builder\miniconda3\shell\condabin\conda-hook.ps1"'
    #Create conda environment and download dependencies
    - conda create -n build-env --yes
    #Activate conda environment
    - conda activate build-env
    #Conda install dependencies
    - conda install conda-build
    - conda update conda --yes
    #- cd C:\Users\builder\miniconda3\pkgs\anaconda-client-1.10.0-py37*\Lib\site-packages\binstar_client\commands\
    #- $location=pwd
    #- cd $CI_PROJECT_DIR
    # The anaconda upload script has a bug which does not allow it to print logs. The modified file fixes that
    #- mv -Force $CI_PROJECT_DIR\contrib\packaging-python\conda\upload.py $location\upload.py
    - set REQUESTS_CA_BUNDLE=C:\users\builder\miniconda3\Lib\site-packages\certifi\cacert.pem
    - conda build purge-all timeout /t 240
  environment:
    name: pychrono-win64
    url: https://anaconda.org/projectchrono/pychrono

windows:deploy-python3.8:
  stage: deploy
  needs: []
  extends: .windows-deploy-base
  script:
    # Building pyChrono for python v3.8
    - conda build .\contrib\packaging-python\conda -c conda-forge -c dlr-sc -c intel --python=3.8 --no-remove-work-dir
    - conda install --yes anaconda-client
    - anaconda --token "$Env:ANACONDA_TOKEN" upload "$Env:CONDA_INSTALL_LOCN\envs\build-env\conda-bld\win-64\pychrono*.bz2" --force --label main
  after_script:
    # Get rid of the build environment
    - Remove-Item $Env:CONDA_INSTALL_LOCN\envs\build-env -Recurse -Force
    # Get rid of the downloaded numpy package to prevent conflicts
    - Remove-Item $Env:CONDA_ISNTALL_LOCN\pkgs\numpy* -Recurse -Force
  environment:
    name: pychrono-win64
    url: https://anaconda.org/projectchrono/pychrono
  when: manual
  artifacts:
    expire_in: 60m
    paths:
      - ./logs/

windows:deploy-python3.9:
  stage: deploy
  needs: []
  extends: .windows-deploy-base
  script:
    # Building pyChrono for python v3.9
    - conda build .\contrib\packaging-python\conda -c conda-forge -c dlr-sc -c intel --python=3.9 --no-remove-work-dir
    - conda install --yes anaconda-client
    - anaconda --token "$Env:ANACONDA_TOKEN" upload "$Env:CONDA_INSTALL_LOCN\envs\build-env\conda-bld\win-64\pychrono*.bz2" --force --label main
  after_script:
    # Get rid of the build environment
    - Remove-Item $Env:CONDA_INSTALL_LOCN\envs\build-env -Recurse -Force
    # Get rid of the downloaded numpy package to prevent conflicts
    - Remove-Item $Env:CONDA_ISNTALL_LOCN\pkgs\numpy* -Recurse -Force
  environment:
    name: pychrono-win64
    url: https://anaconda.org/projectchrono/pychrono
  when: manual
  artifacts:
    expire_in: 60m
    paths:
      - ./logs/

windows:deploy-python3.10:
  stage: deploy
  needs: []
  extends: .windows-deploy-base
  script:
    # Building pyChrono for python v3.10
    - conda build .\contrib\packaging-python\conda -c conda-forge -c dlr-sc -c intel --python=3.10 --no-remove-work-dir
    - conda install --yes anaconda-client
    - anaconda --token "$Env:ANACONDA_TOKEN" upload "$Env:CONDA_INSTALL_LOCN\envs\build-env\conda-bld\win-64\pychrono*.bz2" --force --label main
  after_script:
    # Get rid of the build environment
    - Remove-Item $Env:CONDA_INSTALL_LOCN\envs\build-env -Recurse -Force
    # Get rid of the downloaded numpy package to prevent conflicts
    - Remove-Item $Env:CONDA_ISNTALL_LOCN\pkgs\numpy* -Recurse -Force
  environment:
    name: pychrono-win64
    url: https://anaconda.org/projectchrono/pychrono
  when: manual
  artifacts:
    expire_in: 60m
    paths:
      - ./logs/

#----------------#
# macOS Builders #
#----------------#

.macos:
  tags:
    - macos
  before_script:
  - uname -a
  - git submodule init
  - git submodule update
  - mkdir -p build
  - export BREW_PY_MAJOR=$(python3 --version | awk '{print $2;}' | cut -d. -f1,2)
  - export BREW_PY_VER=$(find $HOMEBREW_PREFIX/Cellar/python@$BREW_PY_MAJOR -depth 1 | cut -d/ -f6)
  - echo $CI_PROJECT_DIR

.macos-monterey:
  extends: .macos
  tags:
    - monterey

.macos-monterey-build:
  stage: build
  extends: .macos-monterey
  script:
  # Configuring chrono
  - cmake -G "Ninja Multi-Config" -B $CI_PROJECT_DIR/build/ -S $CI_PROJECT_DIR --preset=macosci
  - export CLANG_FORCE_COLOR_DIAGNOSTICS=1
  - cd build
  # Building chrono
  - cmake --build . --config Release -j 7
  artifacts:
    expire_in: 60m
    paths:
    - build/

.macos-monterey-test:
  stage: test
  extends: .macos-monterey
  script:
  - cd build
  # Copying files to correct directory for CI because of Ninja Multi-Config
  - cp -r bin/Release/* bin/
  - cp -r bin/data .
  - export CTEST_OUTPUT_ON_FAILURE=1
  - ninja test


macos-apple:monterey:build:
  extends: .macos-monterey-build
  tags:
    - macos
    - monterey
    - apple

macos-apple:monterey:test:
  extends: .macos-monterey-test
  tags:
    - macos
    - monterey
    - apple
  needs: ["macos-apple:monterey:build"]
  dependencies: ["macos-apple:monterey:build"]

# macOS Conda Deployment

.macos-deploy-base:
  extends: .macos
  before_script:
    - export CONDA_NPY=19
    - brew install wget
    - ARCHITECTURE=`uname -m`
    - wget https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-$ARCHITECTURE.sh -O ~/miniconda.sh
    - rm -r $HOME/miniconda > /dev/null 2>&1 || FAILED=true
    - bash ~/miniconda.sh -b -p $HOME/miniconda
    - export PATH=$HOME/miniconda/bin:$PATH
    - source activate $HOME/miniconda/
    - conda install --yes jinja2
    - conda config --set show_channel_urls true
    - conda install --yes conda-build anaconda-client conda-verify
    - conda config --add channels conda-forge
    - conda config --add channels dlr-sc
    #- conda install -c dlr-sc opencascade --yes
    #- conda install -c intel mkl-devel --yes
    - ls $HOME/miniconda/lib/
    - conda build purge-all
    # this command is needed to get the git describe data needed by the numbering
    - git fetch --prune --unshallow
    - clang --version
    # conda build uses "build.sh" for both Linux and MacOS. Since we do things differently, we do the following workaround
    - mv -f ./contrib/packaging-python/conda/buildMacOS.sh ./contrib/packaging-python/conda/build.sh
    - conda install -c conda-forge llvm-openmp --yes
  environment:
    name: pychrono-macos
    url: https://anaconda.org/projectchrono/pychrono

.macos-apple-deploy-base:
  extends: .macos-deploy-base
  tags:
    - apple
  environment:
    name: pychrono-macos
    url: https://anaconda.org/projectchrono/pychrono

macos-apple:macos-deploy-python3.8:
  stage: deploy
  needs: []
  extends: .macos-apple-deploy-base
  script:
    - echo "Build PyChrono 3.8 and deploy via Anaconda..."
    - conda build purge-all
    - conda build ./contrib/packaging-python/conda --no-remove-work-dir --dirty --python=3.8
    - anaconda -t $ANACONDA_TOKEN upload $HOME/miniconda/conda-bld/osx-arm64/pychrono*.bz2 -l main --force
  when: manual
  tags:
    - macos
    - monterey
    - apple

macos-apple:macos-deploy-python3.9:
  stage: deploy
  needs: []
  extends: .macos-apple-deploy-base
  script:
    - echo "Build PyChrono 3.9 and deploy via Anaconda..."
    - conda build purge-all
    - conda build ./contrib/packaging-python/conda --no-remove-work-dir --dirty --python=3.9
    - anaconda -t $ANACONDA_TOKEN upload $HOME/miniconda/conda-bld/osx-arm64/pychrono*.bz2 -l main --force
  when: manual
  tags:
    - macos
    - monterey
    - apple

macos-apple:macos-deploy-python3.10:
  stage: deploy
  needs: []
  extends: .macos-apple-deploy-base
  script:
    - echo "Build PyChrono 3.10 and deploy via Anaconda..."
    - conda build purge-all
    - conda build ./contrib/packaging-python/conda --no-remove-work-dir --dirty --python=3.10
    - anaconda -t $ANACONDA_TOKEN upload $HOME/miniconda/conda-bld/osx-arm64/pychrono*.bz2 -l main --force
  when: manual
  tags:
    - macos
    - monterey
    - apple
