#####################################
## ProjectChrono Default CI Config ##
#####################################

# Build Stages (shared by each platform)
stages:
  - build
  - test
  - deploy

variables:
  CHRONO_UNIX_SHARED: "-DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=TRUE 
    -DBUILD_BENCHMARKING=TRUE -DENABLE_MODULE_POSTPROCESS=TRUE 
    -DENABLE_MODULE_PYTHON=TRUE -DENABLE_MODULE_COSIMULATION=FALSE 
    -DENABLE_MODULE_IRRLICHT=TRUE -DENABLE_MODULE_VEHICLE=TRUE 
    -DENABLE_MODULE_PARALLEL=TRUE -DENABLE_MODULE_OPENGL=TRUE"

#---------------------#
# Arch Linux Builders #
#---------------------#

.archlinux:
  tags:
  - linux
  image: 
    name: archlinux/base
    entrypoint: ["/usr/bin/bash", "-c"]
  before_script:
  - uname -a
  - pacman -Syyu --noconfirm base-devel cuda git eigen cmake glfw glm glew glut irrlicht wget boost fish python python-pip openmpi swig
  - ldconfig
  - wget https://bitbucket.org/blaze-lib/blaze/downloads/blaze-3.5.tar.gz
  - tar -xf blaze-3.5.tar.gz
  - cp blaze-3.5/blaze -r /usr/local/include
  - git submodule init
  - git submodule update
  - mkdir -p build

linux:arch-gcc:build:
  stage: build
  extends: .archlinux
  script:
  - cd build
  - cmake ../ $CHRONO_UNIX_SHARED -DENABLE_MODULE_DISTRIBUTED=TRUE 
    -DENABLE_MODULE_FSI=TRUE -DCMAKE_C_COMPILER=/usr/bin/gcc 
    -DCMAKE_CXX_COMPILER=/usr/bin/g++ -DCUDA_HOST_COMPILER=/usr/bin/gcc-8 
    -DEIGEN3_INCLUDE_DIR=/usr/include/eigen3 -DENABLE_MODULE_GRANULAR=TRUE
  - make -j 8
  artifacts:
    expire_in: 60m
    paths:
    - build/
    

linux:arch-gcc:test:
  stage: test
  needs: ["linux:arch-gcc:build"]
  extends: .archlinux
  script:
  - cd build
  - make test
  dependencies: ["linux:arch-gcc:build"]


linux:arch-gcc:deploy:
  stage: deploy
  needs: ["linux:arch-gcc:test"]
  extends: .archlinux
  script:
# Clean up the docker image because it is very large and pychrono won't fit
    - pacman -R cuda openmpi --noconfirm
    - pacman -Scc --noconfirm
    - echo "Build PyChrono and deploy via Anaconda..."
# Remove build directory because anaconda doesn't want it
    - rm -rf build
    - export CONDA_NPY=19
    - wget "http://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh"
    - bash Miniconda3-latest-Linux-x86_64.sh -b
    - rm -rf Miniconda3-latest-Linux-x86_64.sh
    - export PATH=$HOME/miniconda3/bin:$PATH
    - conda update --yes conda
    - conda install --yes pip jinja2
    - conda config --set show_channel_urls true
    - conda install conda-build anaconda-client conda-verify --yes
    - conda update conda --yes
    - conda config --add channels https://conda.anaconda.org/conda-forge
    - conda config --add channels https://conda.anaconda.org/intel
    - conda install -c conda-forge -c dlr-sc -c pythonocc -c oce -c 3dhubs oce=0.18.2 --yes
    - conda install -c intel mkl-devel --yes
    - conda build ./contrib/packaging-python/conda --no-remove-work-dir --dirty --python=3.7
    - anaconda -t $ANACONDA_TOKEN upload $HOME/miniconda3/conda-bld/linux-64/pychrono*.bz2 -l develop --force
  environment:
    name: pychrono-archlinux
    url: https://anaconda.org/projectchrono/pychrono
  when: manual


linux:arch-llvm:build:
  stage: build
  extends: .archlinux
  script:
  - pacman -S --noconfirm llvm clang openmp
  - cd build
  - cmake ../ $CHRONO_UNIX_SHARED -DENABLE_MODULE_DISTRIBUTED=TRUE 
    -DENABLE_MODULE_FSI=TRUE -DCMAKE_C_COMPILER=/usr/bin/clang 
    -DCMAKE_CXX_COMPILER=/usr/bin/clang++ -DCUDA_HOST_COMPILER=/usr/bin/gcc-8 
    -DEIGEN3_INCLUDE_DIR=/usr/include/eigen3 -DENABLE_MODULE_GRANULAR=TRUE

  - make -j 8
  artifacts:
    expire_in: 60m
    paths:
    - build/


linux:arch-llvm:test:
  stage: test
  needs: ["linux:arch-llvm:build"]
  extends: .archlinux
  script:
  - pacman -S --noconfirm llvm clang openmp
  - cd build
  - make test
  dependencies: ["linux:arch-llvm:build"]


#----------------#
# CentOS Builder #
#----------------#

.centos:
  tags:
  - linux
  image:
    name: nvidia/cuda:10.0-devel-centos7
    entrypoint: ["/usr/bin/bash", "-c"]
  before_script:
  - uname -a
  - yum -y update && yum -y install epel-release
  - yum -y groupinstall "Development Tools"
  - yum -y install centos-release-scl
  - yum -y install devtoolset-8
  # The normal "scl enable ..." route creates a new bash session which will 
  # cause the script to hang. We need to activate the environment in the
  # _current_ shell instead
  - source /opt/rh/devtoolset-8/enable
  - yum -y install cmake3 eigen3 irrlicht-devel glew-devel glfw-devel glfw-devel
      libGLEW glm-devel sudo boost-devel freeglut-devel wget fish python 
      python-devel python-pip pcre-devel openmpi openmpi-devel
  - alternatives --install /usr/local/bin/cmake cmake /usr/bin/cmake3 20 
      --slave /usr/local/bin/ctest ctest /usr/bin/ctest3 
      --slave /usr/local/bin/cpack cpack /usr/bin/cpack3 
      --slave /usr/local/bin/ccmake ccmake /usr/bin/ccmake3 
      --family cmake
  # SWIG will have been mysteriously installed, we install a newer version later
  - yum -y remove swig
  - ldconfig
  - wget https://sourceforge.net/projects/swig/files/swig/swig-3.0.12/swig-3.0.12.tar.gz
  - tar -xf swig-3.0.12.tar.gz
  - cd swig-3.0.12
  - ./configure && make && make install
  - ldconfig
  - cd ../
  - wget https://bitbucket.org/blaze-lib/blaze/downloads/blaze-3.5.tar.gz
  - tar -xf blaze-3.5.tar.gz
  - cp blaze-3.5/blaze -r /usr/local/include
  - git submodule init
  - git submodule update
  - mkdir -p build

linux:centos:build:
  stage: build
  extends: .centos
  script:
  - cd build
  - cmake ../ $CHRONO_UNIX_SHARED -DENABLE_MODULE_DISTRIBUTED=TRUE
      -DCMAKE_C_COMPILER=/opt/rh/devtoolset-8/root/usr/bin/gcc 
      -DCMAKE_CXX_COMPILER=/opt/rh/devtoolset-8/root/usr/bin/g++ 
      -DENABLE_MODULE_GRANULAR=TRUE
      -DCUDA_HOST_COMPILER=/opt/rh/devtoolset-8/root/usr/bin/gcc
      # -DENABLE_MODULE_FSI=TRUE 
  - make -j 8
  artifacts:
    expire_in: 60m
    paths:
    - build/

linux:centos:test:
  stage: test
  needs: ["linux:centos:build"]
  extends: .centos
  script:
  - cd build
  - make test
  dependencies: ["linux:centos:build"]
  

#----------------#
# Ubuntu Builder #
#----------------#

.ubuntu:
  tags:
    - linux
  image:
    name: nvidia/cuda:10.1-base-ubuntu18.04
  before_script:
    - uname -a
    - export DEBIAN_FRONTEND=noninteractive
    - apt-get update; apt-get -y install cuda wget python git 
        cmake build-essential libboost-dev swig3.0 libeigen3-dev 
        libglfw3-dev libglm-dev libglew-dev freeglut3-dev libirrlicht-dev
        libopenmpi-dev python3 python3-dev
    - ldconfig
    - wget https://bitbucket.org/blaze-lib/blaze/downloads/blaze-3.5.tar.gz
    - tar -xf blaze-3.5.tar.gz
    - cp blaze-3.5/blaze -r /usr/local/include
    - git submodule init
    - git submodule update
    - mkdir -p build

#----------------#
# Ubuntu Builder #
#----------------#

linux:ubuntu1804:build:
  stage: build
  extends: .ubuntu
  script:
    - cd build
    - cmake ../ $CHRONO_UNIX_SHARED -DENABLE_MODULE_DISTRIBUTED=TRUE
        -DCMAKE_C_COMPILER=/usr/bin/gcc -DCMAKE_CXX_COMPILER=/usr/bin/g++
        -DPYTHON_EXECUTABLE=/usr/bin/python3 -DENABLE_MODULE_GRANULAR=TRUE
        -DCUDA_HOST_COMPILER=/usr/bin/gcc
    - make -j 8
  artifacts:
    expire_in: 60m
    paths:
      - build/


linux:ubuntu1804:test:
  stage: test
  needs: ["linux:ubuntu1804:build"]
  extends: .ubuntu
  script:
    - cd build
    - make test
  dependencies: ["linux:ubuntu1804:build"]


linux:ubuntu1804:deploy:
  stage: deploy
  needs: ["linux:ubuntu1804:test"]
  extends: .ubuntu
  script:
    - echo "Build PyChrono and deploy via Anaconda..."
# Remove build directory because anaconda doesn't want it
    - rm -rf build
    - export CONDA_NPY=19
    - wget "http://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh"
    - bash Miniconda3-latest-Linux-x86_64.sh -b
    - export PATH=$HOME/miniconda3/bin:$PATH
    - conda update --yes conda
    - conda install --yes pip jinja2
    - conda config --set show_channel_urls true
    - conda install conda-build anaconda-client conda-verify --yes
    - conda update conda --yes
    - conda config --add channels https://conda.anaconda.org/conda-forge
    - conda config --add channels https://conda.anaconda.org/intel
    - conda install -c conda-forge -c dlr-sc -c pythonocc -c oce -c 3dhubs oce=0.18.2 --yes
    - conda install -c intel mkl-devel --yes
    - conda build ./contrib/packaging-python/conda --no-remove-work-dir --dirty --python=3.6
    - anaconda -t $ANACONDA_TOKEN upload $HOME/miniconda3/conda-bld/linux-64/pychrono*.bz2 -l develop --force
  environment:
    name: pychrono-ubuntu1804
    url: https://anaconda.org/projectchrono/pychrono
  when: manual



#------------------#
# Windows Builders #
#------------------#

.windows:
  tags:
  - windows
  before_script:
  - $CHRONO_W64_SHARED = @(
    "-DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=TRUE",
    "-DBUILD_BENCHMARKING=TRUE -DENABLE_MODULE_POSTPROCESS=TRUE",
    "-DENABLE_MODULE_PYTHON=TRUE -DENABLE_MODULE_COSIMULATION=FALSE",
    "-DENABLE_MODULE_IRRLICHT=TRUE -DENABLE_MODULE_VEHICLE=TRUE",
    "-DENABLE_MODULE_PARALLEL=TRUE -DENABLE_MODULE_OPENGL=TRUE"
    )
    #  - wget -UseBasicParsing https://bitbucket.org/blaze-lib/blaze/downloads/blaze-3.5.tar.gz -OutFile blaze-3.5.tar.gz
    #  - tar -xf .\blaze-3.5.tar.gz blaze-3.5/blaze
  - $CHRONO_W64_LIBRARIES = @(
    "-DBLAZE_DIR=C:/Users/Public/Documents/blaze-3.1",
    "-DSWIG_EXECUTABLE=C:/Users/Public/Documents/swigwin-3.0.12/swig.exe",
    "-DBOOST_ROOT=C:/Users/Public/Documents/boost_1_68_0",
    "-DGLM_INCLUDE_DIR=C:/Users/Public/Documents/glm-0.9.9.5",
    "-DGLEW_DLL=C:/Users/Public/Documents/glew-2.1.0/bin/Release/x64/glew32.dll",
    "-DGLEW_INCLUDE_DIR=C:/Users/Public/Documents/glew-2.1.0/include",
    "-DGLEW_LIBRARY=C:/Users/Public/Documents/glew-2.1.0/lib/Release/x64/glew32.lib",
    "-DGLFW_DLL=C:/Users/Public/Documents/glfw-3.3/lib-vc2015/glfw3.dll",
    "-DGLFW_INCLUDE_DIR=C:/Users/Public/Documents/glfw-3.3/include/GLFW",
    "-DGLFW_LIBRARY=C:/Users/Public/Documents/glfw-3.3/lib-vc2015/glfw3dll.lib",
    "-DIRRLICHT_LIBRARY=C:/Users/Public/Documents/irrlicht-1.8.4/lib/Win64-visualStudio/Irrlicht.lib",
    "-DIRRLICHT_ROOT=C:/Users/Public/Documents/irrlicht-1.8.4",
    "-DEIGEN3_INCLUDE_DIR=C:/Users/Public/Documents/eigen-3.3.7"
    )
  - git submodule init
  - git submodule update
  - mkdir -Force build


windows:vs2019:build:
  stage: build
  extends: .windows
  script:
  - cd build
  - cmake ../ -G "Visual Studio 16 2019" -A x64 -T v142 
    @CHRONO_W64_SHARED 
    @CHRONO_W64_LIBRARIES 
    -DUSE_PARALLEL_CUDA=OFF
  #-DENABLE_MODULE_FSI=TRUE
  #- Invoke-Expression "& `'C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\devenv.com`' Chrono.sln -Build `"Release|x64`" -log buildlog.txt"
  - '& "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\MSBuild.exe" Chrono.sln -maxcpucount:8 -property:Configuration=Release'
  artifacts:
    expire_in: 60m
    paths:
      - build/


windows:vs2019:test:
  stage: test
  needs: ["windows:vs2019:build"]
  extends: .windows
  script:
  - cd build
  - ctest
  dependencies: ["windows:vs2019:build"]


windows:vs2019:deploy:
  stage: deploy
  needs: ["windows:vs2019:test"]
  extends: .windows
  script:
    - Out-Host "Build PyChrono and deploy via Anaconda..."
    - Out-Host "**NOT YET IMPLEMENTED**"
  environment:
    name: pychrono-win64
    url: https://anaconda.org/projectchrono/pychrono
  when: manual


windows:vs2017:build:
  stage: build
  extends: .windows
  script:
  - cd build
  - cmake ../ -G "Visual Studio 16 2019" -A x64 -T v141
    @CHRONO_W64_SHARED
    @CHRONO_W64_LIBRARIES
    -DUSE_PARALLEL_CUDA=OFF
  #-DENABLE_MODULE_FSI=TRUE
  #- Invoke-Expression "& `'C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\devenv.com`' Chrono.sln -Build `"Release|x64`" -log buildlog.txt"
  - '& "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\MSBuild.exe" Chrono.sln -maxcpucount:8 -property:Configuration=Release'
  artifacts:
    expire_in: 60m
    paths:
      - build/

windows:vs2015:build:
  stage: build
  extends: .windows
  script:
  - cd build
  - cmake ../ -G "Visual Studio 16 2019" -A x64 -T v140
    @CHRONO_W64_SHARED
    @CHRONO_W64_LIBRARIES
    -DUSE_PARALLEL_CUDA=OFF 
  #-DENABLE_MODULE_FSI=TRUE
  #- Invoke-Expression "& `'C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\devenv.com`' Chrono.sln -Build `"Release|x64`" -log buildlog.txt"
  - '& "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\MSBuild.exe" Chrono.sln -maxcpucount:8 -property:Configuration=Release'
  artifacts:
    expire_in: 60m
    paths:
      - build/


#----------------#
# macOS Builders #
#----------------#

.macos:
  tags:
    - macos
  before_script:
  - uname -a
  - git submodule init
  - git submodule update
  - mkdir -p build

macos:highsierra:build:
  stage: build
  extends: .macos
  script:
  - cd build
  - cmake ../ $CHRONO_UNIX_SHARED -DENABLE_MODULE_DISTRIBUTED=FALSE 
    -DENABLE_MODULE_FSI=FALSE -DCMAKE_C_COMPILER=$(which clang)
    -DCMAKE_CXX_COMPILER=$(which clang++)
    -DCMAKE_CXX_FLAGS="-Wno-deprecated-declarations -Xpreprocessor -fopenmp -lomp -Wno-unused-command-line-argument"
    -DUSE_PARALLEL_CUDA=FALSE -DCUDA_NVCC_FLAGS=-std=c++11
    -DEIGEN3_INCLUDE_DIR=/usr/local/include/eigen3
    -DBLAZE_DIR=/usr/local/include
  - make -j 3
  artifacts:
    expire_in: 60m
    paths:
    - build/
    

macos:highsierra:test:
  stage: test
  needs: ["macos:highsierra:build"]
  extends: .macos
  script:
  - cd build
  - make test
  dependencies: ["macos:highsierra:build"]




#-----------------#
# FreeBSD Builder #
#-----------------#

.freebsd:
  tags:
  - freebsd
  before_script:
  - uname -a
  - wget https://bitbucket.org/blaze-lib/blaze/downloads/blaze-3.5.tar.gz
  - tar -xf blaze-3.5.tar.gz
  - cp blaze-3.5/blaze -r /usr/local/include
  - git submodule update
  - git submodule init
  - mkdir -p build


.freebsd:llvm:build:
  stage: build
  extends: .freebsd
  script:
  - cmake ../ -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=TRUE 
    -DBUILD_BENCHMARKING=TRUE -DENABLE_MODULE_POSTPROCESS=TRUE 
    -DENABLE_MODULE_PYTHON=TRUE -DENABLE_MODULE_COSIMULATION=FALSE 
    -DENABLE_MODULE_IRRLICHT=TRUE -DENABLE_MODULE_VEHICLE=TRUE 
    -DENABLE_MODULE_PARALLEL=TRUE -DENABLE_MODULE_OPENGL=TRUE 
    -DENABLE_MODULE_DISTRIBUTED=TRUE -DEIGEN3_INCLUDE_DIR=/usr/include/eigen3
  - make -j 8
  artifacts:
    expire_in: 60m
    paths:
    - build/


.freebsd:llvm:test:
  stage: test
  needs: ["freebsd:llvm:build"]
  extends: .freebsd
  script:
  - cd build
  - make test
  dependencies: ["freebsd:llvm:build"]
