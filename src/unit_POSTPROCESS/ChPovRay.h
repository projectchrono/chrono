#ifndef CHPOVRAY_H
#define CHPOVRAY_H

//////////////////////////////////////////////////
//
//   ChPovRay.h
//
//
//   HEADER file for CHRONO,
//	 Multibody dynamics engine
//
// ------------------------------------------------
// 	 Copyright:Alessandro Tasora / DeltaKnowledge
//             www.deltaknowledge.com
// ------------------------------------------------
///////////////////////////////////////////////////


#include <fstream>
#include <string>
#include <sstream>
#include "physics/ChSystem.h"
#include "ChPostProcessBase.h"
#include "core/ChHashTable.h"
#include "core/ChHashFunction.h"
#include "assets/ChVisualization.h"

namespace chrono{
 namespace postprocess{

		
/// Class for post processing implementation that generates
/// scripts for POVray. The script can be used in POVray to
/// render photo-realistic animations. 

class ChApiPostProcess ChPovRay : public ChPostProcessBase
{
public:
	ChPovRay(ChSystem* system);
	virtual ~ChPovRay(){}

		/// Add all ChPhysicsItem objects in the system to 
		/// the list of objects to render (if they have some
		/// associated ChAsset object). Call this at the
		/// beginning of the simulation, for instance.
	virtual void AddAll();

		/// Add a ChPhysicsItem object to the list of objects 
		/// to render (if it has some associated ChAsset object)
	virtual void Add(ChSharedPtr<ChPhysicsItem> mitem);

		/// Remove all ChPhysicsItem objects that were previously added.
	virtual void RemoveAll();

		/// Set the filename of the template for the script generation
		/// If not set, it defaults to "../data/_template_POV.pov"
	virtual void SetTemplateFile(const std::string &filename) 
				{
					template_filename = filename;
				}
		/// Set the filename of the .bmp files generated by POV. 
		/// It should NOT contain the .bmp suffix because POV will append
		/// the frame number (es. pic0001.bmp, pic0002.bmp, ...).
		/// It can contain a directory (es. "myframes/pic"), but the
		/// directory must already exist.
		/// If not set, it defaults to "pic".
	virtual void SetPictureFilebase(const std::string &filename) 
				{
					pic_filename = filename;
				}

		/// Set the filename of the output script (to be used in POV) generated
		/// by the function ExportScript(), es: "my_render.pov"
		/// It can contain a directory (es. "folder/my_render.pov"), but the
		/// directory must already exist.
		/// If not set, it defaults to "render_frames.pov".
	virtual void SetOutputScriptFile(const std::string &filename) 
				{
					out_script_filename = filename;
				}

		/// Set the filename of the output data generated
		/// by the function ExportData(), es: "state"; when the user will
		/// execute POV and run the .ini file generated by ExportScript(),
		/// the .ini script will call the .pov script that will load these data files.
		/// It should NOT contain the .bmp suffix because ExportData()
		/// will append the frame number (es. state0001.dat, state0002.dat, ...).
		/// It can contain a directory (es. "output_folder/state"), but the
		/// directory must already exist.
		/// If not set, it defaults to "state".
	virtual void SetOutputDataFilebase(const std::string &filename) 
				{
					out_data_filename = filename;
				}


		/// Set the camera position and aim point - will write this in the output .pov file.
	virtual void SetCamera(ChVector<> location, ChVector<> aim, double angle, bool ortho = false);

		/// When ExportData() is called, it saves .dat files in incremental
		/// way, starting from zero: data0000.dat, data0001.dat etc., but you can
		/// override the formatted number by calling SetFramenumber(), before.
	virtual void SetFramenumber(unsigned int mn) {this->framenumber = mn;}

		/// This function is used to export the script that will
		/// be used by POV to process all the exported data and
		/// to render the complete animation.
		/// It contains the definition of geometric shapes, lights 
		/// and so on, and a POV function that moves meshes in the
		/// position specified by data files saved at each step.
	virtual void ExportScript()
				{
					this->ExportScript(this->out_script_filename);
				}
		/// As ExportScript(), but overrides the filename.
	virtual void ExportScript(const std::string &filename);

		/// This function is used at each timestep to export data
		/// formatted in a way that it can be load with the POV
		/// scripts generated by ExportScript().
		/// The generated filename must be set at the beginning of
		/// the animation via SetOutputDataFilebase(), and then a
		/// number is automatically appended and incremented at each 
		/// ExportData(), ex.
		///  state0001.dat, state0002.dat,
		/// The user should call this function in the while() loop 
		/// of the simulation, once per frame. 
	virtual void ExportData()
				{
					char fullpath[200];
					sprintf(fullpath,"%s%05d", this->out_data_filename.c_str(), this->framenumber);
					this->ExportData(std::string(fullpath));
				}
		/// As ExportScript(), but overrides the automatically computed filename.
	virtual void ExportData(const std::string &filename);

protected:			

	virtual void ExportAssets();

	std::vector< ChSharedPtr<ChPhysicsItem> > mdata;
	ChHashTable<unsigned int, ChSharedPtr<ChAsset> > pov_assets;


	std::string template_filename;
	std::string pic_filename;

	std::string out_script_filename;
	std::string out_data_filename;

	unsigned int framenumber;

	ChVector<> camera_location;
	ChVector<> camera_aim;
	double	   camera_angle;
	bool	   camera_orthographic;

	ChColor	   background;
};


 } // end namespace
} // end namespace

#endif