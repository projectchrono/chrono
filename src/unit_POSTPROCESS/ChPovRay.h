#ifndef CHPOVRAY_H
#define CHPOVRAY_H

//////////////////////////////////////////////////
//
//   ChPovRay.h
//
//
//   HEADER file for CHRONO,
//	 Multibody dynamics engine
//
// ------------------------------------------------
// 	 Copyright:Alessandro Tasora / DeltaKnowledge
//             www.deltaknowledge.com
// ------------------------------------------------
///////////////////////////////////////////////////


#include <fstream>
#include <string>
#include <sstream>
#include "physics/ChSystem.h"
#include "ChPostProcessBase.h"

namespace chrono{
 namespace postprocess{

		
/// Class for post processing implementation that generates
/// scripts for POVray. The script can be used in POVray to
/// render photo-realistic animations. 

class ChApiPostProcess ChPovRay : public ChPostProcessBase
{
public:
	ChPovRay(ChSystem* system);
	virtual ~ChPovRay(){}

		/// Add all ChPhysicsItem objects in the system to 
		/// the list of objects to render (if they have some
		/// associated ChAsset object). Call this at the
		/// beginning of the simulation, for instance.
	virtual void AddAll();

		/// Add a ChPhysicsItem object to the list of objects 
		/// to render (if it has some associated ChAsset object)
	virtual void Add(ChSharedPtr<ChPhysicsItem> mitem);

		/// Remove all ChPhysicsItem objects that were previously added.
	virtual void RemoveAll();

		/// Set the filename of the template for the script generation
		/// If not set, it defaults to "../data/_template_POV.pov"
	virtual void SetTemplateFile(const std::string &filename) 
				{
					template_filename = filename;
				}
		/// Set the filename of the .bmp files generated by POV. 
		/// It should NOT contain the .bmp suffix because POV will append
		/// the frame number (es. pic0001.bmp, pic0002.bmp, ...).
		/// It can contain a directory (es. "myframes/pic").
		/// If not set, it defaults to "pic".
	virtual void SetPictureFile(const std::string &filename) 
				{
					pic_filename = filename;
				}

		/// This function is used to export the script that will
		/// be used by POV to process all the exported data and
		/// to render the complete animation.
		/// It contains the definition of geometric shapes, lights 
		/// and so on, and a POV function that moves meshes in the
		/// position specified by data files saved at each step.
	virtual void ExportScript(const std::string &filename);

		/// This function is used at each timestep to export data
		/// formatted in a way that it can be load with the POV
		/// script.
		/// The user should call this function in the while() loop 
		/// of the simulation, once per frame. 
	virtual void ExportData(const std::string &filename);

protected:			

	std::vector< ChSharedPtr<ChPhysicsItem> > mdata;

	std::string template_filename;
	std::string pic_filename;

};


 } // end namespace
} // end namespace

#endif