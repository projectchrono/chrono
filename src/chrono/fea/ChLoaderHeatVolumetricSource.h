// =============================================================================
// PROJECT CHRONO - http://projectchrono.org
//
// Copyright (c) 2014 projectchrono.org
// All rights reserved.
//
// Use of this source code is governed by a BSD-style license that can be found
// in the LICENSE file at the top level of the distribution and at
// http://projectchrono.org/license-chrono.txt.
//
// =============================================================================
// Authors: Alessandro Tasora 
// =============================================================================

#ifndef CHLOADERHEATVOLUMETRICSOURCE_H
#define CHLOADERHEATVOLUMETRICSOURCE_H


#include "chrono/physics/ChLoaderUVW.h"


namespace chrono {
namespace fea {

/// @addtogroup chrono_fea
/// @{


/// Thermal load: forced volumetric heat flux (volumetric heat source).
/// Use this for applying a heat flux [W/m^3] inside a volume of finite elements, as a
/// per-volume scalar flux for thermal analysis (ex. generated by resistors via Joule effect,
/// or radiative absorption, or chemical reactions in the bulk material).

class ChApi ChLoaderHeatVolumetricSource : public ChLoaderUVWdistributed {
public:
    ChLoaderHeatVolumetricSource(std::shared_ptr<ChLoadableUVW> mloadable)
        : ChLoaderUVWdistributed(mloadable), m_heat_flux(0), num_integration_points(1) {}

    virtual void ComputeF(double U,              ///< parametric coordinate in surface
        double V,              ///< parametric coordinate in surface
        double W,              ///< parametric coordinate in surface
        ChVectorDynamic<>& F,  ///< Result F vector here, size must be = n.field coords.of loadable
        ChVectorDynamic<>* state_x,  ///< if != 0, update state (pos. part) to this, then evaluate F
        ChVectorDynamic<>* state_w   ///< if != 0, update state (speed part) to this, then evaluate F
    ) override;

    /// Set the heat flux applied to UVW volume, as [W/m^3]
    void SetVolumeHeatFlux(double heat_flux) { m_heat_flux = heat_flux; }

    /// Get the heat flux applied to UVW volume, as [W/m^3]
    double GetVolumeHeatFlux() { return m_heat_flux; }

    void SetIntegrationPoints(int val) { num_integration_points = val; }
    virtual int GetIntegrationPointsU() override { return num_integration_points; }
    virtual int GetIntegrationPointsV() override { return num_integration_points; }
    virtual int GetIntegrationPointsW() override { return num_integration_points; }

private:
    double m_heat_flux;
    int num_integration_points;
};



/// @} chrono_fea

}  // end namespace fea

}  // end namespace chrono

#endif
