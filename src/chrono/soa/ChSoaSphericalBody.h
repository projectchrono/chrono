// =============================================================================
// PROJECT CHRONO - http://projectchrono.org
//
// Copyright (c) 2025 projectchrono.org
// All rights reserved.
//
// Use of this source code is governed by a BSD-style license that can be found
// in the LICENSE file at the top level of the distribution and at
// http://projectchrono.org/license-chrono.txt.
//
// =============================================================================
// Authors: Radu Serban
// =============================================================================
//
// Definition of the ChSoaSphericalBody class.
//
// =============================================================================

#ifndef CH_SOA_SPHERICAL_BODY_H
#define CH_SOA_SPHERICAL_BODY_H

#include "chrono/core/ChApiCE.h"

#include "chrono/soa/ChSoaMobilizedBodyT.h"

namespace chrono {
namespace soa {

/// @addtogroup chrono_soa
/// @{

/// Concrete mobilized body with spherical joint.
class ChApi ChSoaSphericalBody : public ChSoaMobilizedBodyT<3> {
  public:
    /// Construct a body mobilized with a spherical joint.
    /// A ChSoaSphericalBodyis a mobilizer with three rotational degrees of freedom, modeled with quaternions. A
    /// spherical joint cannot translate but can represent arbitrary rotation. The moving frame M (on the
    /// ChSoaSphericalBody) and the fixed frame F (on the parent body) are such that their origins are always
    /// coincident. The generalized speeds for this mobilizer are the angular velocity expressed in F, so they cause
    /// rotations around F's x,y,z axes, respectively. For this mobilizer the velocity Jacobian H_FM is constant (and
    /// set at construction) and thus its derivative is zero (also set at construction).
    ChSoaSphericalBody(std::shared_ptr<ChSoaMobilizedBody> parent,
                      const ChSoaMassProperties& mprops,
                      const ChFramed& inbFrame,
                      const ChFramed& outbFrame,
                      const std::string& name = "");

    ChSoaSphericalBody(const ChSoaSphericalBody& other);

    /// "Virtual" copy constructor (covariant return type).
    virtual ChSoaSphericalBody* Clone() const override { return new ChSoaSphericalBody(*this); }

    virtual int getNumQ() const override { return 4; }

    // Set the internal coordinates for the ChSoaSphericalBodyis so they best approximate the specified
    // (relative) orientation, angular velocity, and angular acceleration, respectively.
    // A spherical joint can represent any rotation about the 3 axes, but no translation.

    virtual void setRelRot(const ChMatrix33d& relRot) override;
    virtual void setRelLoc(const ChVector3d& relLoc) override {}
    virtual void setRelAngVel(const ChVector3d& relAngVel) override;
    virtual void setRelLinVel(const ChVector3d& relLinVel) override {}
    virtual void setRelAngAcc(const ChVector3d& relAngAcc) override;
    virtual void setRelLinAcc(const ChVector3d& relLinAcc) override {}

    // Mobilizer-specific access to generalized coordinates, velocities, and accelerations.

    void setRelPos(const ChMatrix33d& rotMat);
    void setRelVel(const ChVector3d& angVel);
    void setRelAcc(const ChVector3d& angAcc);

    virtual double getQ0(int dof) const override;
    virtual double getU0(int dof) const override;

    /// Utility function to calculate the joint rotation matrix corresponding to the specified generalized coordinate.
    static ChMatrix33d calcRelRot(const ChQuaterniond& q);

  private:
    /// Calculate the across-joint transform X_FM.
    /// X_FM gives the change in position and orientation induced by the joint's generalized coordinates, generated by
    /// the current q values.
    virtual void setJointTransform(const ChVectorDynamic<>& y) override;

    /// Allow the body to perform any operations at the beginning of a simulation step.
    virtual void prepSim() override;

    ChQuaterniond m_q0;
    ChVector3d m_u0;
};

/// @} chrono_soa

}  // namespace soa
}  // namespace chrono

#endif
