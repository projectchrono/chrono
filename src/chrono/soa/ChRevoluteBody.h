// =============================================================================
// PROJECT CHRONO - http://projectchrono.org
//
// Copyright (c) 2024 projectchrono.org
// All rights reserved.
//
// Use of this source code is governed by a BSD-style license that can be found
// in the LICENSE file at the top level of the distribution and at
// http://projectchrono.org/license-chrono.txt.
//
// =============================================================================
// Authors: Radu Serban
// =============================================================================
//
// Definition of the ChRevoluteBody class.
//
// =============================================================================

#ifndef CH_REVOLUTE_BODY_H
#define CH_REVOLUTE_BODY_H

#include "chrono/core/ChApiCE.h"

#include "chrono/soa/ChMobilizedBodyT.h"

namespace chrono {
namespace soa {

/// @addtogroup chrono_soa
/// @{

/// Concrete mobilized body with revolute joint.
class ChApi ChRevoluteBody : public ChMobilizedBodyT<1> {
  public:
    /// Construct a body mobilized with a revolute joint.
    /// A ChRevoluteBody is a mobilizer with one rotational degree of freedom. A pin joint cannot translate and only
    /// rotates about the z-axis. The moving frame M (on the ChRevoluteBody) and the fixed frame F (on the parent body)
    /// are such that their origins are always coincident and their z-axes always aligned. Therefore, a ChRevoluteBody
    /// can only represent a rotation along the common z-axis and it can represent only the zero translation.
    /// The generalized speed is the angular velocity of M in the F frame, about F's z-axis, expressed in F. (This axis
    /// is also constant in M.) For this mobilizer the velocity Jacobian H_FM is constant (and set at construction) and
    /// thus its derivative is zero (also set at construction).
    ChRevoluteBody(std::shared_ptr<ChMobilizedBody> parent,
                   const ChFramed& inbFrame,
                   const ChFramed& outbFrame,
                   const ChMassProps& mprops,
                   const std::string& name = "");

    virtual int getNumQ() const override { return 1; }

    // Set the internal coordinates for the ChRevoluteBody so they best approximate the
    // specified (relative) orientation, angular velocity, and angular acceleration,
    // respectively.
    // A pin joint can only represent a rotation about the z-axis, but no
    // translation. As such, setRelRot() calculates the angle of rotation about the
    // z-axis that best approximates (in the Frobenius norm sense) the given
    // rotation matrix.

    virtual void setRelRot(const ChMatrix33d& relRot) const override;
    virtual void setRelLoc(const ChVector3d& relLoc) const override {}
    virtual void setRelAngVel(const ChVector3d& relAngVel) const override;
    virtual void setRelLinVel(const ChVector3d& relLinVel) const override {}
    virtual void setRelAngAcc(const ChVector3d& relAngAcc) const override;
    virtual void setRelLinAcc(const ChVector3d& relLinAcc) const override {}

    // Mobilizer-specific access to generalized coordinates, velocities, and accelerations.

    void setRelPos(double rotAngle) const;
    void setRelVel(double rotRate) const;
    void setRelAcc(double rotAcc) const;

    /// Utility function to calculate the joint rotation matrix corresponding to the specified generalized coordinate.
    static ChMatrix33d calcRelRot(double q);

  private:
    /// Calculate the across-joint transform X_FM.
    /// X_FM gives the change in position and orientation induced by the joint's generalized coordinates, generated by
    /// the current q values.
    virtual void setJointTransform(const ChVectorDynamic<>& y) override;

    /// Allow the body to perform any operations at the beginning of a simulation step.
    /// To prevent floating-point precision problems when the angular generalized coordinate accumulates excessively, we
    /// restrict it to [-2 * PI, 2 * PI].
    virtual void prepSim() override;
};

/// @} chrono_soa

}  // namespace soa
}  // namespace chrono

#endif
